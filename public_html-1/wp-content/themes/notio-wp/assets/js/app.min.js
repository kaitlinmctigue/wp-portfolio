!function($, window, _) {
    "use strict";
    for (var lastTime = 0, vendors = [ "ms", "moz", "webkit", "o" ], x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) window.requestAnimationFrame = window[vendors[x] + "RequestAnimationFrame"], 
    window.cancelAnimationFrame = window[vendors[x] + "CancelAnimationFrame"] || window[vendors[x] + "CancelRequestAnimationFrame"];
    window.requestAnimationFrame || (window.requestAnimationFrame = function(callback) {
        var currTime = new Date().getTime(), timeToCall = Math.max(0, 16 - (currTime - lastTime)), id = window.setTimeout(function() {
            callback(currTime + timeToCall);
        }, timeToCall);
        return lastTime = currTime + timeToCall, id;
    }), window.cancelAnimationFrame || (window.cancelAnimationFrame = function(id) {
        clearTimeout(id);
    });
    var $doc = $(document), win = $(window), Modernizr = window.Modernizr, AnimationsArray = [];
    window.SITE = {
        init: function() {
            {
                var self = this, content = $("#wrapper"), pl = content.find(">.preloader");
                $("body").data("cart-count");
            }
            content.waitForImages(function() {
                TweenMax.to(pl, 1, {
                    autoAlpha: 0,
                    ease: Quart.easeOut,
                    onComplete: function() {
                        pl.css("display", "none");
                    }
                });
                for (var obj in self) if (self.hasOwnProperty(obj)) {
                    var _method = self[obj];
                    void 0 !== _method.selector && void 0 !== _method.init && $(_method.selector).length > 0 && _method.init();
                }
            });
        },
        SmoothScroll: {
            selector: ".smooth_scroll",
            init: function() {
                smoothScroll();
            }
        },
        reverseAnimations: {
            start: function(container) {
                for (var out = _.difference(AnimationsArray, container), i = 0; i < out.length; ++i) out[i].progress() > 0 && (out[i].timeScale(1.6).reverse(), 
                $("#quick_cart").data("toggled", !1), $(".mobile-toggle").data("toggled", !1), $("#quick_search").data("toggled", !1));
            }
        },
        menu: {
            selector: "#mobile-menu",
            init: function() {
                var menu = $("#mobile-menu"), items = menu.find(".mobile-menu>li,.menu-footer p, .select-wrapper"), toggle = $(".mobile-toggle"), span = toggle.find("span"), cc = menu.find(".spacer"), inner = menu.find(".menu-container"), tlMainNav = new TimelineLite({
                    paused: !0,
                    onStart: function() {
                        menu.css("display", "block");
                    },
                    onComplete: function() {
                        window.SITE.customScroll.init();
                    },
                    onReverseComplete: function() {
                        menu.css("display", "none");
                    }
                }), toggleHover = new TimelineLite({
                    paused: !0
                }), close = $(".panel-close");
                AnimationsArray.push(tlMainNav), AnimationsArray.push(toggleHover), tlMainNav.add(TweenLite.to(menu, .5, {
                    autoAlpha: 1,
                    ease: Quart.easeOut
                })).add(TweenLite.to(inner, .5, {
                    x: 0,
                    ease: Quart.easeOut
                })).staggerFrom(items, .1 * items.length, {
                    x: "50",
                    opacity: 0,
                    ease: Quart.easeOut
                }, .1), toggleHover.add(TweenLite.to(span, .5, {
                    x: "0%",
                    ease: Quart.easeOut
                })).add(TweenLite.to(toggle.find("div"), .5, {
                    rotation: 90,
                    ease: Quart.easeOut
                })).add(TweenLite.to(span.eq(0), .2, {
                    y: "-2",
                    ease: Quart.easeOut
                })).add(TweenLite.to(span.eq(2), .2, {
                    y: "2",
                    ease: Quart.easeOut
                }), "-=0.2"), toggle.hover(function() {
                    toggle.data("toggled") || toggleHover.restart();
                }, function() {
                    toggle.data("toggled") || toggleHover.reverse();
                }).on("click", function() {
                    return toggle.data("toggled") ? (tlMainNav.timeScale(1.6).reverse(), toggle.data("toggled", !1)) : (window.SITE.reverseAnimations.start([ tlMainNav, toggleHover ]), 
                    tlMainNav.timeScale(1).restart(), toggle.data("toggled", !0)), !1;
                }), cc.add(close).on("click", function() {
                    tlMainNav.timeScale(1.6).reverse(), toggleHover.reverse(), toggle.data("toggled", !1);
                });
            }
        },
        search: {
            selector: "#quick_search",
            init: function() {
                var base = this, container = $(base.selector), target = $("#searchpopup"), cc = target.find(".spacer"), el = target.find("p, input"), searchMain = new TimelineLite({
                    paused: !0,
                    onStart: function() {
                        target.css("display", "block");
                    },
                    onReverseComplete: function() {
                        target.css("display", "none");
                    }
                });
                AnimationsArray.push(searchMain), searchMain.add(TweenLite.to(target, .5, {
                    autoAlpha: 1,
                    ease: Quart.easeOut
                })).staggerFrom(el, .2, {
                    y: "50",
                    opacity: 0,
                    ease: Quart.easeOut
                }, .1), container.on("click", function() {
                    return container.data("toggled") ? (searchMain.timeScale(1.6).reverse(), container.data("toggled", !1)) : (window.SITE.reverseAnimations.start([ searchMain ]), 
                    searchMain.timeScale(1).restart(), container.data("toggled", !0)), !1;
                }), cc.on("click", function() {
                    searchMain.timeScale(1.6).reverse(), container.data("toggled", !1);
                });
            }
        },
        quickCart: {
            selector: "#quick_cart",
            start: function() {
                var init = $("#quick_cart").data("init"), close = $(".panel-close");
                window.toggleHover = new TimelineMax({
                    paused: !0
                }), window.MainCart = new TimelineMax({
                    paused: !0,
                    onStart: function() {
                        $("#side-cart").css("display", "block");
                    },
                    onComplete: function() {
                        window.SITE.customScroll.init();
                    },
                    onReverseComplete: function() {
                        $("#side-cart").css("display", "none");
                    }
                }), AnimationsArray.push(window.MainCart), AnimationsArray.push(window.toggleHover), 
                window.MainCart.add(TweenLite.to($("#side-cart"), .5, {
                    autoAlpha: 1,
                    ease: Quart.easeOut
                })).add(TweenLite.to($("#side-cart").find("#cart-container"), .5, {
                    x: 0,
                    ease: Quart.easeOut
                })).add(TweenMax.staggerFrom($("#side-cart").find(".item"), .1 * $("#side-cart").find(".item").length, {
                    y: "50",
                    opacity: 0,
                    ease: Quart.easeOut
                }, .1)), window.toggleHover.add(TweenLite.to($("#quick_cart").find(".handle"), .3, {
                    y: "-3px",
                    ease: Quart.easeOut
                })), init || ($("#quick_cart").data("init", !0), $("#quick_cart").hover(function() {
                    $("#quick_cart").data("toggled") || window.toggleHover.play();
                }, function() {
                    $("#quick_cart").data("toggled") || window.toggleHover.reverse();
                }).on("click", function() {
                    return $("#quick_cart").data("toggled") ? (window.MainCart.timeScale(1.6).reverse(), 
                    $("#quick_cart").data("toggled", !1)) : (window.SITE.reverseAnimations.start([ window.MainCart, window.toggleHover ]), 
                    window.MainCart.timeScale(1).play(), $("#quick_cart").data("toggled", !0)), !1;
                })), $("#side-cart").find(".spacer").add(close).on("click", function() {
                    return window.MainCart.timeScale(1.6).reverse(), window.toggleHover.reverse(), $("#quick_cart").data("toggled", !1), 
                    !1;
                });
            }
        },
        overlay: {
            selector: ".overlay-effect .overlay",
            init: function(el) {
                var base = this, container = $(base.selector), target = el ? el.find(base.selector) : container;
                target.each(function() {
                    var _this = $(this), overlayInner = _this.find(".child"), overlayHover = new TimelineLite({
                        paused: !0
                    }), line = overlayInner.find("hr");
                    TweenLite.set(overlayInner, {
                        opacity: 0,
                        y: 50
                    }), overlayHover.add(TweenLite.to(_this, .3, {
                        opacity: 1,
                        top: 10,
                        left: 10,
                        right: 10,
                        bottom: 10,
                        ease: Quart.easeOut
                    })).add(TweenMax.staggerTo(overlayInner, .3, {
                        y: 0,
                        opacity: 1,
                        ease: Quart.easeOut
                    }, .15)).add(TweenLite.to(line, .15, {
                        scaleX: 1,
                        ease: Quart.easeOut
                    }), "-=0.25"), _this.hoverIntent(function() {
                        overlayHover.timeScale(1).play();
                    }, function() {
                        overlayHover.timeScale(1.6).reverse();
                    });
                });
            }
        },
        portfolioHeight: {
            selector: ".horizontal, .vertical",
            init: function() {
                var base = this, container = $(base.selector);
                base.control(container), win.scroll(_.debounce(function() {
                    base.control(container);
                }, 50)), win.resize(_.debounce(function() {
                    base.control(container);
                }, 50));
            },
            control: function(el) {
                var h = $(".header"), a = $("#wpadminbar"), ah = a ? a.outerHeight() : 0, f = $(".footer-fixed").length ? $("#footer").outerHeight() : 0;
                el.filter(".horizontal").each(function() {
                    var _this = $(this), article = _this.find(".post"), height = (win.height() - h.outerHeight() - ah - f) / 2;
                    article.height(height);
                }), el.filter(".vertical").each(function() {
                    var _this = $(this), article = _this.find(".post"), height = win.height() - h.outerHeight() - ah - f;
                    article.height(height);
                });
            }
        },
        textStyle: {
            selector: ".portfolio-text-style, .portfolio-text-style-2, .post.style5",
            init: function() {
                var base = this, container = $(base.selector);
                TweenLite.set(container, {
                    autoAlpha: 0,
                    x: 100
                }), base.control(container), win.scroll(_.debounce(function() {
                    base.control(container);
                }, 50)), win.resize(_.debounce(function() {
                    base.control(container);
                }, 50));
            },
            control: function(el) {
                var off = .1, k = 0, l = el.length;
                el.filter(":in-viewport").each(function() {
                    var _this = $(this);
                    "0" === _this.css("opacity") && (TweenLite.to(_this, off * l, {
                        delay: k * off,
                        x: 0,
                        autoAlpha: 1,
                        ease: Quart.easeOut
                    }), k++);
                });
            }
        },
        singlePortfolio: {
            selector: ".portfolio_nav",
            init: function() {
                var nav = $(".portfolio_nav").find("a");
                nav.each(function() {
                    var _this = $(this), overlayInner = _this.find(".overlay"), overlayEl = _this.find("span"), overlayHover = new TimelineLite({
                        paused: !0
                    });
                    TweenLite.set(overlayInner, {
                        opacity: 0
                    }), TweenLite.set(overlayEl, {
                        opacity: 0,
                        y: 20
                    }), overlayHover.add(TweenLite.to(overlayInner, .25, {
                        opacity: 1,
                        ease: Quart.easeOut
                    })).add(TweenMax.staggerTo(overlayEl, .25, {
                        y: 0,
                        opacity: 1,
                        ease: Quart.easeOut
                    }, .1)), _this.hover(function() {
                        overlayHover.timeScale(1).restart();
                    }, function() {
                        overlayHover.timeScale(1.6).reverse();
                    });
                });
            }
        },
        skrollr: {
            selector: "body",
            init: function() {
                var main = $('div[role="main"]');
                main.find("[data-top-bottom]").length > 0 && main.waitForImages(function() {
                    skrollr.init({
                        forceHeight: !1,
                        easing: "outCubic",
                        mobileCheck: function() {
                            return !1;
                        }
                    });
                });
            }
        },
        mobileMenu: {
            selector: ".mobile-menu",
            init: function() {
                var base = this, container = $(base.selector), parents = container.find('li:has(".sub-menu")>a');
                parents.on("click", function(e) {
                    var that = $(this), menu = that.next(".sub-menu");
                    that.hasClass("active") ? (that.removeClass("active"), menu.slideUp("200", function() {
                        setTimeout(function() {
                            window.SITE.customScroll.init();
                        }, 10);
                    })) : (that.addClass("active"), menu.slideDown("200", function() {
                        setTimeout(function() {
                            window.SITE.customScroll.init();
                        }, 10);
                    })), e.stopPropagation(), e.preventDefault();
                });
            }
        },
        navDropdown: {
            selector: ".sf-menu",
            init: function() {
                var base = this, container = $(base.selector), item = container.find("li.menu-item-has-children:not(.menu-item-mega-child)");
                item.each(function() {
                    {
                        var that = $(this), dropdown = (that.offset(), that.find(">.sub-menu"));
                        that.find("li.menu-item-has-children");
                    }
                    that.hoverIntent(function() {
                        var window_width = parseInt(win.outerWidth(), 10), dropdown_width = parseInt(dropdown.outerWidth(), 10), dropdown_offset_left = parseInt(that.offset().left, 10), dropdown_move = window_width - dropdown_width - dropdown_offset_left;
                        that.addClass("sfHover"), 0 > dropdown_move && dropdown.css("left", dropdown_move - 60 + "px"), 
                        dropdown.fadeIn(), $(this).find(">a").addClass("active");
                    }, function() {
                        that.removeClass("sfHover"), dropdown.hide(), $(this).find(">a").removeClass("active");
                    });
                });
            }
        },
        fullHeightContent: {
            selector: ".full-height-content",
            init: function() {
                var base = this, container = $(base.selector);
                base.control(container), win.resize(_.debounce(function() {
                    base.control(container);
                }, 50));
            },
            control: function(container) {
                var h = $(".header"), a = $("#wpadminbar"), f = $(".footer-fixed"), ah = a ? a.outerHeight() : 0, fh = f.length ? $("#footer").outerHeight() : 0, is_firefox = navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
                container.each(function() {
                    var _this = $(this), height = win.height() - h.outerHeight() - ah - fh;
                    is_firefox ? _this.css("height", height) : _this.css("min-height", height);
                });
            }
        },
        carousel: {
            selector: ".owl",
            init: function() {
                var base = this, container = $(base.selector);
                container.each(function() {
                    {
                        var that = $(this), columns = that.data("columns"), navigation = (that.data("center") === !0 ? !0 : !1, 
                        that.data("navigation") === !0 ? !0 : !1), autoplay = that.data("autoplay") === !1 ? !1 : !0, pagination = that.data("pagination") === !0 ? !0 : !1;
                        that.data("autowidth") === !0 ? !0 : !1, that.data("bgcheck") ? that.data("bgcheck") : !1, 
                        that.data("autowidth") === !0 ? !1 : !0;
                    }
                    that.owlCarousel({
                        slideSpeed: 1e3,
                        paginationSpeed: 1e3,
                        rewindSpeed: 1e3,
                        autoPlay: autoplay,
                        goToFirst: !0,
                        stopOnHover: !0,
                        navigation: navigation,
                        navigationText: [ "", "" ],
                        pagination: pagination,
                        paginationNumbers: !1,
                        responsive: !0,
                        items: columns,
                        itemsDesktop: !1,
                        itemsDesktopSmall: [ 980, 3 > columns ? columns : 3 ],
                        itemsTablet: [ 768, 2 > columns ? columns : 2 ],
                        itemsMobile: [ 479, 1 ],
                        itemsScaleUp: !1
                    });
                });
            }
        },
        toggle: {
            selector: ".toggle .title",
            init: function() {
                var base = this, container = $(base.selector);
                container.each(function() {
                    var that = $(this);
                    that.on("click", function() {
                        that.hasClass("toggled") ? that.removeClass("toggled").closest(".toggle").find(".inner").slideUp(200) : that.addClass("toggled").closest(".toggle").find(".inner").slideDown(200);
                    });
                });
            }
        },
        masonry: {
            selector: ".masonry",
            init: function() {
                var base = this, container = $(base.selector);
                container.each(function() {
                    var that = $(this), el = that.children(".item"), loadmore = $(that.data("loadmore")), filters = that.find(".filters"), org = [], page = 1;
                    if (TweenLite.set(el, {
                        opacity: 0,
                        y: 100
                    }), that.imagesLoaded(function() {
                        that.isotope({
                            itemSelector: ".item",
                            transitionDuration: 0,
                            masonry: {
                                columnWidth: ".grid-sizer"
                            }
                        }).isotope("once", "layoutComplete", function(i, l) {
                            org = _.pluck(l, "element");
                        }), that.isotope("layout"), win.scroll(_.debounce(function() {
                            that.is(":in-viewport") && TweenMax.staggerTo(org, 1, {
                                y: 0,
                                opacity: 1,
                                ease: Quart.easeOut
                            }, .25);
                        }, 50)).trigger("scroll"), loadmore.on("click", function() {
                            var text = loadmore.text(), type = loadmore.data("type"), loading = loadmore.data("loading"), nomore = loadmore.data("nomore"), initial = loadmore.data("initial"), categories = loadmore.data("categories"), count = loadmore.data("count"), style = loadmore.data("masonry");
                            return loadmore.text(loading).addClass("loading"), $.post(themeajax.url, {
                                action: "thb_ajax",
                                count: count,
                                type: type,
                                initial: initial,
                                style: style,
                                categories: categories,
                                page: page++
                            }, function(data) {
                                var d = $.parseHTML($.trim(data)), l = d ? d.length : 0;
                                "" === data || "undefined" === data || "No More Posts" === data || "No $args array created" === data ? (data = "", 
                                loadmore.text(nomore).removeClass("loading").off("click")) : ($(d).appendTo(that).hide().imagesLoaded(function() {
                                    $(d).show(), that.isotope("appended", $(d)), that.isotope("layout"), TweenMax.set($(d), {
                                        opacity: 0,
                                        y: 100
                                    }), TweenMax.staggerTo($(d), .25 * l, {
                                        y: 0,
                                        opacity: 1,
                                        ease: Quart.easeOut,
                                        onComplete: window.SITE.overlay.init($(d))
                                    }, .25);
                                }), count > l ? loadmore.text(nomore).removeClass("loading") : loadmore.text(text).removeClass("loading"));
                            }), !1;
                        });
                    }), filters.length) {
                        var c = filters.next(".thb-toggle"), li = filters.find("li"), li_l = li.length, a = filters.find("a"), tl = new TimelineMax({
                            paused: !0
                        });
                        tl.to(c, .1, {
                            x: "-100%",
                            ease: Quart.easeOut
                        }).to(filters, 0, {
                            className: "+=active",
                            ease: Quart.easeOut
                        }).delay(.25).to(filters, .2, {
                            y: "0"
                        }).staggerFromTo(li, .1 * li_l, {
                            y: -20,
                            opacity: 0,
                            ease: Quart.easeOut
                        }, {
                            y: 0,
                            opacity: 1,
                            ease: Quart.easeOut
                        }, .1), c.on("click", function() {
                            return tl.timeScale(1).restart(), !1;
                        }), a.on("click", function() {
                            var _this = $(this), selector = _this.attr("data-filter");
                            return a.removeClass("active"), _this.addClass("active"), that.isotope("once", "layoutComplete", function(x, y) {
                                var iso_in = _.pluck(y, "element"), iso_out = _.difference(_.pluck(x.items, "element"), iso_in), iso_ani = new TimelineMax({
                                    onComplete: function() {
                                        tl.timeScale(1.6).reverse();
                                    }
                                });
                                TweenLite.set(iso_in, {
                                    opacity: 0,
                                    y: 100
                                }), iso_ani.staggerTo(iso_out, .1 * iso_out.length, {
                                    y: 100,
                                    autoAlpha: 0,
                                    ease: Quart.easeOut
                                }, .1, !1, function() {
                                    TweenMax.set(iso_out, {
                                        display: "none"
                                    });
                                }).staggerTo(iso_in, .1 * iso_in.length, {
                                    y: 0,
                                    autoAlpha: 1,
                                    ease: Quart.easeOut
                                }, .1);
                            }), that.isotope({
                                filter: selector
                            }), !1;
                        });
                    }
                });
            }
        },
        grid: {
            selector: ".grid",
            init: function() {
                var base = this, container = $(base.selector);
                container.each(function() {
                    var that = $(this);
                    win.load(function() {
                        that.isotope({
                            masonry: {
                                columnWidth: ".grid-sizer"
                            },
                            itemSelector: ".item",
                            transitionDuration: "0.5s"
                        });
                    });
                });
            }
        },
        shareThisArticle: {
            selector: "#share-post-link",
            init: function() {
                var base = this, container = $(base.selector), fb = container.data("fb"), tw = container.data("tw"), pi = container.data("pi"), li = container.data("li"), gp = container.data("gp"), temp = "", target = $(".share_container"), cc = target.find(".spacer"), shareMain = new TimelineLite({
                    paused: !0,
                    onStart: function() {
                        target.css("display", "block");
                    },
                    onReverseComplete: function() {
                        target.css("display", "none");
                    }
                });
                fb && (temp += '<a href="#" class="boxed-icon facebook"><i class="fa fa-facebook"></i></a> '), 
                tw && (temp += '<a href="#" class="boxed-icon twitter"><i class="fa fa-twitter"></i></a> '), 
                pi && (temp += '<a href="#" class="boxed-icon pinterest"><i class="fa fa-pinterest"></i></a> '), 
                li && (temp += '<a href="#" class="boxed-icon linkedin"><i class="fa fa-linkedin"></i></a> '), 
                gp && (temp += '<a href="#" class="boxed-icon google-plus"><i class="fa fa-google-plus"></i></a> '), 
                target.find(".placeholder").sharrre({
                    share: {
                        facebook: fb,
                        twitter: tw,
                        pinterest: pi,
                        linkedin: li
                    },
                    buttons: {
                        pinterest: {
                            media: target.find(".placeholder").data("media")
                        }
                    },
                    urlCurl: $("body").data("sharrreurl"),
                    template: temp,
                    enableHover: !1,
                    enableTracking: !1,
                    render: function(api) {
                        $(api.element).on("click", ".twitter", function() {
                            api.openPopup("twitter");
                        }), $(api.element).on("click", ".facebook", function() {
                            api.openPopup("facebook");
                        }), $(api.element).on("click", ".pinterest", function() {
                            api.openPopup("pinterest");
                        }), $(api.element).on("click", ".linkedin", function() {
                            api.openPopup("linkedin");
                        }), $(api.element).on("click", ".google-plus", function() {
                            api.openPopup("googlePlus");
                        });
                        var el = target.find("h6, .boxed-icon");
                        AnimationsArray.push(shareMain), shareMain.add(TweenLite.to(target, .5, {
                            autoAlpha: 1,
                            ease: Quart.easeOut
                        })).staggerFrom(el, .1 * el.length, {
                            y: "50",
                            opacity: 0,
                            ease: Quart.easeOut
                        }, .1), container.on("click", function() {
                            return window.SITE.reverseAnimations.start([ shareMain ]), shareMain.timeScale(1).restart(), 
                            !1;
                        }), cc.on("click", function() {
                            shareMain.timeScale(1.6).reverse();
                        });
                    }
                });
            }
        },
        quantity: {
            selector: ".quantity",
            init: function() {
                {
                    var base = this;
                    $(base.selector);
                }
                $("div.quantity:not(.buttons_added), td.quantity:not(.buttons_added)").addClass("buttons_added").append('<input type="button" value="+" class="plus" />').prepend('<input type="button" value="-" class="minus" />'), 
                $doc.on("click", ".plus, .minus", function() {
                    var $qty = $(this).closest(".quantity").find(".qty"), currentVal = parseFloat($qty.val()), max = parseFloat($qty.attr("max")), min = parseFloat($qty.attr("min")), step = $qty.attr("step");
                    currentVal && "" !== currentVal && "NaN" !== currentVal || (currentVal = 0), ("" === max || "NaN" === max) && (max = ""), 
                    ("" === min || "NaN" === min) && (min = 0), ("any" === step || "" === step || void 0 === step || "NaN" === parseFloat(step)) && (step = 1), 
                    $(this).is(".plus") ? $qty.val(max && (max === currentVal || currentVal > max) ? max : currentVal + parseFloat(step)) : min && (min === currentVal || min > currentVal) ? $qty.val(min) : currentVal > 0 && $qty.val(currentVal - parseFloat(step)), 
                    $qty.trigger("change");
                });
            }
        },
        parallax_bg: {
            selector: "body",
            init: function() {
                {
                    var base = this;
                    $(base.selector);
                }
                Modernizr.touch || $.stellar({
                    horizontalScrolling: !1,
                    verticalOffset: 40
                });
            }
        },
        customScroll: {
            selector: ".custom_scroll",
            init: function() {
                var base = this, container = $(base.selector);
                container.each(function() {
                    var that = $(this);
                    that.perfectScrollbar({
                        wheelPropagation: !1,
                        suppressScrollX: !0
                    });
                }), win.resize(function() {
                    base.resize(container);
                });
            },
            resize: function(container) {
                container.perfectScrollbar("update");
            }
        },
        wpml: {
            selector: "#thb_language_selector",
            init: function() {
                var base = this, container = $(base.selector);
                container.on("change", function() {
                    var url = $(this).val();
                    return url && (window.location = url), !1;
                });
            }
        },
        shop: {
            selector: ".products .product",
            init: function() {
                var base = this, container = $(base.selector);
                container.each(function() {
                    var that = $(this);
                    that.find(".add_to_cart_button").on("click", function() {
                        "" !== $(this).data("added-text") && $(this).text($(this).data("added-text"));
                    });
                });
            }
        },
        variations: {
            selector: ".variations_form input[name=variation_id]",
            init: function() {
                var base = this, container = $(base.selector), org = $(".single-price.single_variation").html();
                container.on("change", _.debounce(function() {
                    var phtml, that = $(this), val = that.val(), images = $("#product-images");
                    if (setTimeout(function() {
                        phtml = val ? that.parents(".variations_form").find(".single_variation span.price").html() : org, 
                        $(".price.single_variation").html(phtml);
                    }, 100), $(".variations_form").length) {
                        var values, variations = [];
                        $(".variations_form").find("select").each(function() {
                            variations.push(this.value);
                        }), values = variations.join(",");
                        {
                            var v = $(".variations_form select option:selected").val(), i = images.find('figure[data-variation="' + values + '"]').parents(".owl-item:not(.cloned)").index();
                            images.data("owlCarousel");
                        }
                        v && images.trigger("owl.goTo", i);
                    }
                }, 50));
            }
        },
        reviews: {
            selector: "#reviews",
            init: function() {
                var base = this, container = $(base.selector);
                container.on("click", "p.stars a", function() {
                    var that = $(this);
                    setTimeout(function() {
                        that.prevAll().addClass("active");
                    }, 10);
                });
            }
        },
        checkout: {
            selector: ".woocommerce-checkout",
            init: function() {
                $("#createaccount", "#checkout_login").on("click", function() {
                    return $("#checkout_register", "#checkout_login").slideToggle(), !1;
                }), $("#ship-to-different-address-checkbox").on("change", function() {
                    return $(".shipping_address").slideToggle("slow", function() {
                        $(".shipping_address").is(":hidden") && $("form.checkout .shipping_address").find("p.form-row").removeClass("woocommerce-invalid-required-field");
                    }), $("body").trigger("country_to_state_changed"), !1;
                });
            }
        },
        loginregister: {
            selector: "#customer_login",
            init: function() {
                var base = this, container = $(base.selector), login = container.find(".login-section.first"), register = container.find(".login-section.second"), line = register.find(".line"), or = register.find(".or"), lrMain = new TimelineLite();
                TweenLite.set([ login, register, line, or ], {
                    opacity: 0
                }), TweenLite.set(login, {
                    x: -100
                }), TweenLite.set(register, {
                    x: 100
                }), TweenLite.set(line, {
                    scaleY: 0
                }), TweenLite.set(or, {
                    scaleY: 0
                }), lrMain.to(login, .5, {
                    opacity: 1,
                    x: 0,
                    ease: Quart.easeOut
                }).to(register, .5, {
                    opacity: 1,
                    x: 0,
                    ease: Quart.easeOut
                }).set(line, {
                    opacity: 1
                }).to(line, .5, {
                    scaleY: 1,
                    ease: Quart.easeOut
                }).to(or, .5, {
                    opacity: 1,
                    scale: 1,
                    ease: Quart.easeOut
                });
            }
        },
        myaccount: {
            selector: "#my-account-nav",
            init: function() {
                var base = this, container = $(base.selector), links = container.find("a"), li = container.find("li"), tabs = $(".tab-pane");
                links.on("click", function() {
                    var that = $(this), target = $(that.attr("href"));
                    return li.removeClass("active"), that.parent("li").addClass("active"), tabs.removeClass("active").hide(0, function() {
                        target.addClass("active").show(), window.SITE.fullHeightContent.init();
                    }), win.trigger("resize"), !1;
                });
            }
        },
        shopSidebar: {
            selector: ".woo.sidebar .widget.woocommerce",
            init: function() {
                var base = this, container = $(base.selector);
                container.each(function() {
                    var that = $(this), t = that.find(">h6");
                    t.append($("<span/>")).on("click", function() {
                        t.toggleClass("active"), t.next().animate({
                            height: "toggle",
                            opacity: "toggle"
                        }, 300), $(".woo.sidebar").find(".custom_scroll").perfectScrollbar("update");
                    });
                });
            }
        },
        parsley: {
            selector: ".comment-form, .wpcf7-form",
            init: function() {
                var base = this, container = $(base.selector);
                $.fn.parsley && container.parsley();
            }
        },
        commentToggle: {
            selector: "#commenttoggle",
            init: function() {
                {
                    var base = this, container = $(base.selector), respond = $("#respond");
                    respond.find("#comment_parent");
                }
                container.on("click", function() {
                    return respond.slideToggle(), !1;
                });
            }
        },
        floatLabel: {
            selector: ".placeholder",
            init: function() {
                var base = this, container = $(base.selector);
                container.floatlabel({
                    slideInput: !1
                });
            }
        },
        contact: {
            selector: ".google_map",
            init: function() {
                var base = this, container = $(base.selector);
                container.each(function() {
                    var mapstyle, that = $(this), mapzoom = that.data("map-zoom"), maplat = that.data("map-center-lat"), maplong = that.data("map-center-long"), pinlatlong = that.data("latlong"), pinimage = that.data("pin-image"), style = that.data("map-style"), expand = that.next(".expand"), tw = that.width();
                    switch (style) {
                      case 0:
                        break;

                      case 1:
                        mapstyle = [ {
                            featureType: "administrative",
                            stylers: [ {
                                visibility: "off"
                            } ]
                        }, {
                            featureType: "poi",
                            stylers: [ {
                                visibility: "simplified"
                            } ]
                        }, {
                            featureType: "road",
                            stylers: [ {
                                visibility: "simplified"
                            } ]
                        }, {
                            featureType: "water",
                            stylers: [ {
                                visibility: "simplified"
                            } ]
                        }, {
                            featureType: "transit",
                            stylers: [ {
                                visibility: "simplified"
                            } ]
                        }, {
                            featureType: "landscape",
                            stylers: [ {
                                visibility: "simplified"
                            } ]
                        }, {
                            featureType: "road.highway",
                            stylers: [ {
                                visibility: "off"
                            } ]
                        }, {
                            featureType: "road.local",
                            stylers: [ {
                                visibility: "on"
                            } ]
                        }, {
                            featureType: "road.highway",
                            elementType: "geometry",
                            stylers: [ {
                                visibility: "on"
                            } ]
                        }, {
                            featureType: "road.arterial",
                            stylers: [ {
                                visibility: "off"
                            } ]
                        }, {
                            featureType: "water",
                            stylers: [ {
                                color: "#5f94ff"
                            }, {
                                lightness: 26
                            }, {
                                gamma: 5.86
                            } ]
                        }, {}, {
                            featureType: "road.highway",
                            stylers: [ {
                                weight: .6
                            }, {
                                saturation: -85
                            }, {
                                lightness: 61
                            } ]
                        }, {
                            featureType: "road"
                        }, {}, {
                            featureType: "landscape",
                            stylers: [ {
                                hue: "#0066ff"
                            }, {
                                saturation: 74
                            }, {
                                lightness: 100
                            } ]
                        } ];
                        break;

                      case 2:
                        mapstyle = [ {
                            featureType: "water",
                            elementType: "all",
                            stylers: [ {
                                hue: "#e9ebed"
                            }, {
                                saturation: -78
                            }, {
                                lightness: 67
                            }, {
                                visibility: "simplified"
                            } ]
                        }, {
                            featureType: "landscape",
                            elementType: "all",
                            stylers: [ {
                                hue: "#ffffff"
                            }, {
                                saturation: -100
                            }, {
                                lightness: 100
                            }, {
                                visibility: "simplified"
                            } ]
                        }, {
                            featureType: "road",
                            elementType: "geometry",
                            stylers: [ {
                                hue: "#bbc0c4"
                            }, {
                                saturation: -93
                            }, {
                                lightness: 31
                            }, {
                                visibility: "simplified"
                            } ]
                        }, {
                            featureType: "poi",
                            elementType: "all",
                            stylers: [ {
                                hue: "#ffffff"
                            }, {
                                saturation: -100
                            }, {
                                lightness: 100
                            }, {
                                visibility: "off"
                            } ]
                        }, {
                            featureType: "road.local",
                            elementType: "geometry",
                            stylers: [ {
                                hue: "#e9ebed"
                            }, {
                                saturation: -90
                            }, {
                                lightness: -8
                            }, {
                                visibility: "simplified"
                            } ]
                        }, {
                            featureType: "transit",
                            elementType: "all",
                            stylers: [ {
                                hue: "#e9ebed"
                            }, {
                                saturation: 10
                            }, {
                                lightness: 69
                            }, {
                                visibility: "on"
                            } ]
                        }, {
                            featureType: "administrative.locality",
                            elementType: "all",
                            stylers: [ {
                                hue: "#2c2e33"
                            }, {
                                saturation: 7
                            }, {
                                lightness: 19
                            }, {
                                visibility: "on"
                            } ]
                        }, {
                            featureType: "road",
                            elementType: "labels",
                            stylers: [ {
                                hue: "#bbc0c4"
                            }, {
                                saturation: -93
                            }, {
                                lightness: 31
                            }, {
                                visibility: "on"
                            } ]
                        }, {
                            featureType: "road.arterial",
                            elementType: "labels",
                            stylers: [ {
                                hue: "#bbc0c4"
                            }, {
                                saturation: -93
                            }, {
                                lightness: -2
                            }, {
                                visibility: "simplified"
                            } ]
                        } ];
                        break;

                      case 3:
                        mapstyle = [ {
                            featureType: "poi",
                            stylers: [ {
                                visibility: "off"
                            } ]
                        }, {
                            stylers: [ {
                                saturation: -70
                            }, {
                                lightness: 37
                            }, {
                                gamma: 1.15
                            } ]
                        }, {
                            elementType: "labels",
                            stylers: [ {
                                gamma: .26
                            }, {
                                visibility: "off"
                            } ]
                        }, {
                            featureType: "road",
                            stylers: [ {
                                lightness: 0
                            }, {
                                saturation: 0
                            }, {
                                hue: "#ffffff"
                            }, {
                                gamma: 0
                            } ]
                        }, {
                            featureType: "road",
                            elementType: "labels.text.stroke",
                            stylers: [ {
                                visibility: "off"
                            } ]
                        }, {
                            featureType: "road.arterial",
                            elementType: "geometry",
                            stylers: [ {
                                lightness: 20
                            } ]
                        }, {
                            featureType: "road.highway",
                            elementType: "geometry",
                            stylers: [ {
                                lightness: 50
                            }, {
                                saturation: 0
                            }, {
                                hue: "#ffffff"
                            } ]
                        }, {
                            featureType: "administrative.province",
                            stylers: [ {
                                visibility: "on"
                            }, {
                                lightness: -50
                            } ]
                        }, {
                            featureType: "administrative.province",
                            elementType: "labels.text.stroke",
                            stylers: [ {
                                visibility: "off"
                            } ]
                        }, {
                            featureType: "administrative.province",
                            elementType: "labels.text",
                            stylers: [ {
                                lightness: 20
                            } ]
                        } ];
                        break;

                      case 4:
                        mapstyle = [ {
                            featureType: "landscape",
                            elementType: "labels",
                            stylers: [ {
                                visibility: "off"
                            } ]
                        }, {
                            featureType: "transit",
                            elementType: "labels",
                            stylers: [ {
                                visibility: "off"
                            } ]
                        }, {
                            featureType: "poi",
                            elementType: "labels",
                            stylers: [ {
                                visibility: "off"
                            } ]
                        }, {
                            featureType: "water",
                            elementType: "labels",
                            stylers: [ {
                                visibility: "off"
                            } ]
                        }, {
                            featureType: "road",
                            elementType: "labels.icon",
                            stylers: [ {
                                visibility: "off"
                            } ]
                        }, {
                            stylers: [ {
                                hue: "#00aaff"
                            }, {
                                saturation: -100
                            }, {
                                gamma: 2.15
                            }, {
                                lightness: 12
                            } ]
                        }, {
                            featureType: "road",
                            elementType: "labels.text.fill",
                            stylers: [ {
                                visibility: "on"
                            }, {
                                lightness: 24
                            } ]
                        }, {
                            featureType: "road",
                            elementType: "geometry",
                            stylers: [ {
                                lightness: 57
                            } ]
                        } ];
                        break;

                      case 5:
                        mapstyle = [ {
                            featureType: "landscape",
                            stylers: [ {
                                hue: "#F1FF00"
                            }, {
                                saturation: -27.4
                            }, {
                                lightness: 9.4
                            }, {
                                gamma: 1
                            } ]
                        }, {
                            featureType: "road.highway",
                            stylers: [ {
                                hue: "#0099FF"
                            }, {
                                saturation: -20
                            }, {
                                lightness: 36.4
                            }, {
                                gamma: 1
                            } ]
                        }, {
                            featureType: "road.arterial",
                            stylers: [ {
                                hue: "#00FF4F"
                            }, {
                                saturation: 0
                            }, {
                                lightness: 0
                            }, {
                                gamma: 1
                            } ]
                        }, {
                            featureType: "road.local",
                            stylers: [ {
                                hue: "#FFB300"
                            }, {
                                saturation: -38
                            }, {
                                lightness: 11.2
                            }, {
                                gamma: 1
                            } ]
                        }, {
                            featureType: "water",
                            stylers: [ {
                                hue: "#00B6FF"
                            }, {
                                saturation: 4.2
                            }, {
                                lightness: -63.4
                            }, {
                                gamma: 1
                            } ]
                        }, {
                            featureType: "poi",
                            stylers: [ {
                                hue: "#9FFF00"
                            }, {
                                saturation: 0
                            }, {
                                lightness: 0
                            }, {
                                gamma: 1
                            } ]
                        } ];
                        break;

                      case 6:
                        mapstyle = [ {
                            stylers: [ {
                                hue: "#2c3e50"
                            }, {
                                saturation: 250
                            } ]
                        }, {
                            featureType: "road",
                            elementType: "geometry",
                            stylers: [ {
                                lightness: 50
                            }, {
                                visibility: "simplified"
                            } ]
                        }, {
                            featureType: "road",
                            elementType: "labels",
                            stylers: [ {
                                visibility: "off"
                            } ]
                        } ];
                        break;

                      case 7:
                        mapstyle = [ {
                            stylers: [ {
                                hue: "#16a085"
                            }, {
                                saturation: 0
                            } ]
                        }, {
                            featureType: "road",
                            elementType: "geometry",
                            stylers: [ {
                                lightness: 100
                            }, {
                                visibility: "simplified"
                            } ]
                        }, {
                            featureType: "road",
                            elementType: "labels",
                            stylers: [ {
                                visibility: "off"
                            } ]
                        } ];
                        break;

                      case 8:
                        mapstyle = [ {
                            featureType: "all",
                            stylers: [ {
                                hue: "#0000b0"
                            }, {
                                invert_lightness: "true"
                            }, {
                                saturation: -30
                            } ]
                        } ];
                    }
                    var centerlatLng = new google.maps.LatLng(maplat, maplong), mapOptions = {
                        center: centerlatLng,
                        styles: mapstyle,
                        zoom: mapzoom,
                        mapTypeId: google.maps.MapTypeId.ROADMAP,
                        scrollwheel: !1,
                        panControl: !1,
                        zoomControl: !1,
                        mapTypeControl: !1,
                        scaleControl: !1,
                        streetViewControl: !1
                    }, map = new google.maps.Map(that[0], mapOptions);
                    google.maps.event.addListenerOnce(map, "tilesloaded", function() {
                        if (pinimage.length > 0) {
                            var pinimageLoad = new Image();
                            pinimageLoad.src = pinimage, $(pinimageLoad).load(function() {
                                base.setMarkers(map, pinlatlong, pinimage);
                            });
                        } else base.setMarkers(map, pinlatlong, pinimage);
                    }), expand.toggle(function() {
                        var w = that.parents(".post-content").width();
                        return that.parents(".contact_map").css("overflow", "visible"), TweenLite.to(that, 2, {
                            width: w,
                            ease: Quart.easeOut,
                            onUpdate: function() {
                                google.maps.event.trigger(map, "resize"), map.setCenter(centerlatLng);
                            }
                        }), !1;
                    }, function() {
                        return TweenLite.to(that, 2, {
                            width: tw,
                            ease: Quart.easeOut,
                            onUpdate: function() {
                                google.maps.event.trigger(map, "resize"), map.setCenter(centerlatLng);
                            },
                            onComplete: function() {
                                that.parents(".contact_map").css("overflow", "hidden");
                            }
                        }), !1;
                    });
                });
            },
            setMarkers: function(map, pinlatlong, pinimage) {
                function showPin(i) {
                    var latlong_array = pinlatlong[i].lat_long.split(","), marker = new google.maps.Marker({
                        position: new google.maps.LatLng(latlong_array[0], latlong_array[1]),
                        map: map,
                        animation: google.maps.Animation.DROP,
                        icon: pinimage,
                        optimized: !1
                    }), contentString = '<div class="marker-info-win"><img src="' + pinlatlong[i].image + '" class="image" /><div class="marker-inner-win"><h1 class="marker-heading">' + pinlatlong[i].title + "</h1><p>" + pinlatlong[i].information + "</p></div></div>", infowindow = new InfoBox({
                        alignBottom: !0,
                        content: contentString,
                        disableAutoPan: !1,
                        maxWidth: 380,
                        closeBoxMargin: "10px 10px 10px 10px",
                        closeBoxURL: "http://www.google.com/intl/en_us/mapfiles/close.gif",
                        pixelOffset: new google.maps.Size(-193, -41),
                        zIndex: null,
                        infoBoxClearance: new google.maps.Size(1, 1)
                    });
                    infoWindows.push(infowindow), google.maps.event.addListener(marker, "click", function(marker, i) {
                        return function() {
                            infoWindows[i].open(map, this);
                        };
                    }(marker, i));
                }
                for (var infoWindows = [], i = 0; i + 1 <= pinlatlong.length; i++) setTimeout(showPin, 250 * i, i);
            }
        },
        equalHeights: {
            selector: "[data-equal]",
            init: function() {
                var base = this, container = $(base.selector);
                container.each(function() {
                    var that = $(this), children = that.data("equal");
                    that.waitForImages(function() {
                        that.find(children).matchHeight(!0);
                    });
                }), $(".shipping-calculator-button").on("click", function() {
                    setTimeout(function() {
                        base.init();
                    }, 800);
                });
            }
        },
        animation: {
            selector: "#wrapper .animation",
            init: function() {
                var base = this, container = $(base.selector);
                base.control(container), win.scroll(function() {
                    base.control(container);
                });
            },
            control: function(element) {
                var t = -1;
                element.filter(":in-viewport").each(function() {
                    var that = $(this);
                    t++, setTimeout(function() {
                        that.addClass("animate");
                    }, 200 * t);
                });
            }
        },
        galleryShortcode: {
            selector: ".gallery",
            init: function() {
                var base = this, container = $(base.selector);
                container.each(function() {
                    var _this = $(this);
                    _this.find("a").addClass("fresco").attr("data-fresco-group", _this.attr("id"));
                });
            }
        },
        toBottom: {
            selector: ".mouse_scroll",
            init: function() {
                var base = this, container = $(base.selector);
                container.each(function() {
                    var _this = $(this);
                    _this.on("click", function() {
                        var p = _this.parents(".row"), h = p.height();
                        return TweenMax.to(window, 1, {
                            scrollTo: {
                                y: p.scrollTop() + h
                            },
                            ease: Quart.easeOut
                        }), !1;
                    });
                });
            }
        },
        toTop: {
            selector: "#scroll_totop",
            init: function() {
                var base = this, container = $(base.selector);
                container.on("click", function() {
                    return TweenMax.to(window, win.height() / 1e3, {
                        scrollTo: {
                            y: 0
                        },
                        ease: Quart.easeOut
                    }), !1;
                }), win.scroll(_.debounce(function() {
                    base.control();
                }, 50));
            },
            control: function() {
                var base = this, container = $(base.selector);
                $doc.height() - (win.scrollTop() + win.height()) < 300 ? TweenMax.to(container, .2, {
                    autoAlpha: 1,
                    ease: Quart.easeOut
                }) : TweenMax.to(container, .2, {
                    autoAlpha: 0,
                    ease: Quart.easeOut
                });
            }
        },
        styleSwitcher: {
            selector: "#style-switcher",
            init: function() {
                var base = this, container = $(base.selector), toggle = container.find(".style-toggle"), onoffswitch = container.find(".switch");
                toggle.on("click", function() {
                    return container.add($(this)).toggleClass("active"), !1;
                }), onoffswitch.each(function() {
                    var that = $(this);
                    that.find("a").on("click", function() {
                        var dataclass = $(this).data("class");
                        return that.find("a").removeClass("active"), $(this).addClass("active"), "boxed" === $(this).parents("ul").data("name") && ($(document.body).removeClass("boxed"), 
                        $(document.body).addClass(dataclass)), "header_grid" === $(this).parents("ul").data("name") && ($(".header .row, #subheader .row").removeClass("notgrid"), 
                        $(".header .row, #subheader .row").addClass(dataclass)), !1;
                    });
                });
                var style = $('<style type="text/css" id="theme_color" />').appendTo("head");
                container.find(".first").minicolors({
                    defaultValue: $(".first").data("default"),
                    change: function(hex) {
                        style.html('.content404 figure, [class^="tag-link"]:hover, #side-cart .buttons a:last-child, .post .post-content .portfolio-text-style-2:hover, .product-information .single_add_to_cart_button, #my-account #my-account-nav li.active, .price_slider .ui-slider-range, .demo_store, .your-order-header .status, .btn.accent, .button.accent, input[type=submit].accent, .thb_tabs .tabs dd a:after, .thb_tabs .tabs li a:after, .thb_tour .tabs dd a:after, .thb_tour .tabs li a:after, .post .post-content .iconbox.type2 > span, .highlight.accent { background:' + hex + '; } .custom_check:checked + .custom_label:before, [class^="tag-link"]:hover, .post .post-content .portfolio-text-style-2:hover, .product-information .single_add_to_cart_button, #my-account #my-account-nav li.active, .price_slider .ui-slider-handle, .product-category > a:after, .chosen-container.chosen-with-drop .chosen-single, .chosen-container .chosen-drop, .btn.accent, .button.accent, input[type=submit].accent,.notification-box.success{ border-color: ' + hex + "; } a:hover, .post .post-meta ul li a, .post .post-title a:hover, .widget ul.menu .current-menu-item > a, .widget.widget_recent_entries ul li .url, .widget.widget_recent_comments ul li .url, .widget.woocommerce.widget_layered_nav ul li .count, .pagination .page-numbers.current, .mobile-menu > li.current-menu-item > a, .mobile-menu > li.sfHover > a, .mobile-menu > li > a:hover, .mobile-menu ul.sub-menu li a:hover, #comments #reply-title small, .post .post-content .filters li h6 a:hover, .post .post-content .filters li h6 a.active, .product_meta p a, .shopping_bag tbody tr td.order-status.Approved, .shopping_bag tbody tr td.product-name .posted_in a, .shopping_bag tbody tr td.product-quantity .wishlist-in-stock, .shopping_bag.order_table tbody tr td h6, .price_slider_amount .button, .price_slider_amount .button:hover, .termscontainer a, ul.accordion > li.active div.title, .tabs .active a, .tabs .active a:hover, .thb_tabs .tabs dd.active a, .thb_tabs .tabs li.active a, .thb_tour .tabs dd.active a, .thb_tour .tabs li.active a, .notification-box a, .notification-box.success .content, .notification-box.success .icon { color: " + hex + "; }");
                    }
                });
            }
        }
    }, win.resize(function() {}), win.scroll(function() {}), $doc.ready(function() {
        window.SITE.init();
    });
}(jQuery, this, _);